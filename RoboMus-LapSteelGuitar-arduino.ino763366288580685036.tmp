#include <Servo.h>
#include <Ultrasonic.h>
 
#define NUMBER_OF_PICKS 9
/*
  struct que representa uma palheta.
  servo -> servo que controla a palheta
  pos -> qual posicao o servo esta, ou seja, 0 acima da corda e 1 abaixo da corda
*/
struct Pick{
  Servo servo;
  int pos;
};
/*
  struct que representa uma mensagem recebida.
  servo -> servo que contrala a palheta
  pos -> qual posicao o servo esta, ou seja, 0 acima da corda e 1 abaixo da corda
*/
struct Message{
  
  byte idAction;
  byte idMessage;
  short relativeTime;
  short duration;
  byte data[20];
  long initialTime;
  long finalTime;
  
};

struct Message currentMessage,nextMessage;


struct Pick pick[NUMBER_OF_PICKS]; //array que representa as palhetas

//o indece é o numero da casa (traste)
// e o valor é a distancia do sensor
// para teste a casa 13 tem o valor inicial da barra
float fret[13];

//engine ports
int enginePin1 = 20; 
int enginePin2 = 19; 

//flag que de termina se é pra ler nova mensagem
byte readNewMsg = 1;

//variaveis auxiliares
int hByte;
int lByte;

//ultrassonic ports
#define TRIGGER_PIN  14
#define ECHO_PIN     15
Ultrasonic ultrasonic(TRIGGER_PIN, ECHO_PIN);
int fretBarPosition= 1; 

//bar ports
Servo servoBar1;
Servo servoBar2;
#define SERVO_BAR_1 24
#define SERVO_BAR_2 22
 
void startBar(){
  servoBar1.attach(SERVO_BAR_1);
  servoBar1.write(0);

  servoBar2.attach(SERVO_BAR_2);
  servoBar2.write(180);

}
/* inicia o vetor 'fret' com a distancia da respectiva do barra posicionada na casa até o sensor para cada casa. (fret[numero_da_casa] = distancia)*/
void startFrets(){
  fret[0] = 28.50; //fret one
  fret[1] = 26.3; //fret two
  fret[2] = 23.15; //fret three
  fret[3] = 21.10; //fret for
  fret[4] = 18.70; //fret five
  fret[5] = 17.25; //fret six
  fret[6] = 14.30; //fret seven
  fret[7] = 12.10; //fret eight
  fret[8] = 9.70; //fret nine
  fret[9] = 8.00; //fret ten
  fret[10] = 6.10; //fret eleven
  fret[11] = 4.55; //fret twelve
  fret[12] = 3.55; //value used only to inicial position to test
  
}
/*Define as portas de controle dos motores que movimentam a barra no braco do instrumento como portas de saida*/
void startEngine(){
  pinMode(enginePin1, OUTPUT);
  pinMode(enginePin2, OUTPUT);

}

/*
 * Inicia o vetor de palhetas com o respectivo servo e uma posicao inicial
 * @paran pin[] contem o numero da porta que cada motor foi conectado
*/
void startPicks(int pin[]){
  

  for(int i=0; i < NUMBER_OF_PICKS; i++){
    pick[i].servo.attach(pin[i]);
    pick[i].servo.write(5);
    pick[i].pos = 0;
  }
  
}
/*
 * Funcao para tocar uma determinar corda
 * @paran *p ponteiro para a palheta que deve ser acionada
*/
void playString(struct Pick *p){
    
    if(p->pos == 0){
      p->servo.write(25);
      p->pos=1;
    }else{
      p->servo.write(5);
      p->pos = 0;
    }   
  
}
/*Funcao que para os motores responsaveis por mover a barra no braco*/
void engineStop(){
  analogWrite(enginePin1, 0); 
  analogWrite(enginePin2, 0); 
}
/*Funcao que a barra para frente. Obs: nao lembre se 'pra frente' eh no sentido do corpo do violao*/
void moveEngineFoward(int engineSpeed){
  analogWrite(enginePin1, engineSpeed);
  analogWrite(enginePin2, 0); 
}
/*Funcao que a barra para tras. Obs: nao lembre se 'pra tras' eh no sentido das tarraxas do violao*/
void moveEngineBackard(int engineSpeed){

  analogWrite(enginePin1, 0); // set pin 2 on L293D low
  analogWrite(enginePin2, engineSpeed); // set pin 7 on L293D high

}

/*Retorna a distancia que o sensor esta lendo*/
float getSensorDistance(){
  float cmMsec, inMsec;
  long microsec = ultrasonic.timing();

  cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
  cmMsec += ultrasonic.convert(microsec, Ultrasonic::CM);
  cmMsec += ultrasonic.convert(microsec, Ultrasonic::CM);
  cmMsec += ultrasonic.convert(microsec, Ultrasonic::CM);
  cmMsec += ultrasonic.convert(microsec, Ultrasonic::CM);

  cmMsec = cmMsec/5;
  return cmMsec;
}


 
/*
 * Funcao que posiciona a barra em uma determinada casa com uma certa velocidade
 * @paran numberFret casa para posicionar a barra
 * @paran engineSpeed velocidade do motor 0-255
*/
void positionBar(int numberFret, int engineSpeed){
   
   float distance = getSensorDistance();
   
   
   while(abs(distance  - fret[numberFret-1]) > 0.1){
     //delay(5);
     if(distance < fret[numberFret-1]){
        moveEngineFoward(engineSpeed);
     }else{
        moveEngineBackard(engineSpeed);
     }
    
     distance = getSensorDistance();

   }
   engineStop();
}
/*Funcao para mover a barra para baixo(encostar nas cordas) ou para cima (desencostar das cordas)*/
void moveBar(int pos){
  servoBar1.write(pos);
  servoBar2.write(180-pos);
}

/* ========================== funcoes para teste ============================== */

/*  TESTE --- 07/04/2017
 *  Funcao para teste de velocidade tocar nota e envia tempo gasto
 *  Envia tempo gasto 2 bytes
 *  
 * @paran numberFret casa para posicionar a barra
 * @paran numberString corda para tocar
 */
void playNoteTest(int fretNumber, int stringNumber){
   
   //positionBar(13, 255); //posicao inicial do teste
   //delay(500);
   int initialTime = millis();
   positionBar(fretNumber, 255);
   //playString(stringNumber);
   //delay(1000);
   int timeSpent = millis() - initialTime;
   char resultado[5];
   //unsigned byte b[2] = {100,200}
   itoa(timeSpent, resultado, 10);
   Serial.write(resultado);
   
}

/* ================================ fim funcoes teste ============================================ */
void setup ()
{
  Serial.begin(9600);
  /*
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  int pin[NUMBER_OF_PICKS] = {2,3,4,5,6,7,8,9,10}; // valores das portas em que os servos da palhetas sao conectados
  startPicks(pin); 
  startEngine();
  startFrets();
  startBar();
  
  //teste
  //delay(100);
  //positionBar(4, 150);
  //positionBar(2, 150); */
  currentMessage.initialTime = millis();
  pinMode(13,OUTPUT);
  digitalWrite(13,LOW);
 

  
}
/* void loop antiga
void loop()
{
   int firstByte;
 
   if(Serial.available() > 0){
  
    firstByte = Serial.read();    
    switch (firstByte){
      
      case 0: // teste piscar led
        digitalWrite(13,1);
        delay(200);
        digitalWrite(13,0);
        break;
      case 30: // codigo para tocar corda
        
        digitalWrite(13,1);
        delay(5);
        digitalWrite(13,0);
        if(Serial.available() > 0){
          
          int stringNumber = Serial.read(); // numero da corda
          
          int id = Serial.read(); //id msg
          playString(&(pick[stringNumber-1])); //tocar codar
          Serial.write(id); // envia o id da msg para confirmacao
         
        }
        break;
      case 50: //codigo para mover barra para cima ou para baixo

        if(Serial.available() > 0){
          
          int pos = Serial.read(); //posicao
          
          int id = Serial.read(); //id da msg
          moveBar(pos); //mover barra
          Serial.write(id);//enviar id de confirmacao
         
        }
        break;
        
      case 60: //codigo para posicionar barra
        
        delay(10);
        if(Serial.available() > 0){
          
          int fret = Serial.read(); // casa para posicionamento
         
          int id = Serial.read();       //id da msg
          positionBar(fret, 200); //posicionar a barra
          Serial.write(id); //enviar id de confirmacao
          
        }
        break;
        
      case 60: //codigo para posicionar barra
 
        if(Serial.available() >= 3 ){
          
          int fret = Serial.read(); // casa para posicionamento
          int id = Serial.read();       //id da msg
          
          //positionBar(fret, 200); //posicionar a barra
          delay(1000); //para teste, simula tempo da funcao
          
          Serial.write(id); //enviar id de confirmacao
          
        }
        break;
        
      case 100: //codigo para para teste de velocidade
        delay(10);
        if(Serial.available() > 0){
 
          int fret = Serial.read(); // casa para posicionamento
          int string = Serial.read();       //id da msg
          playNoteTest(fret, string); //posicionar a barra
          
          
        }
        break;
        
    }

   }

  
  
  
} */

void blinkLed(int t){
  digitalWrite(13, HIGH);
  delay(t);
  digitalWrite(13, LOW);
}

void blinkLed2(int t){
  digitalWrite(13, HIGH);
  delay(t);
  digitalWrite(13, LOW);
  delay(t);
}
/*
  struct Message{
    byte idAction;
    byte idMessage;
    byte relativeTime;
    long duration;
    byte data[20];
    long initialTime;
    long finalTime;
  
  };
*/

void loop()
{
  if(readNewMsg){
    if(Serial.available() > 0){
      /*Read the header*/
      nextMessage.idAction = firstByte;
      nextMessage.idMessage = Serial.read();
     
      hByte = Serial.read();
      lByte = Serial.read();
    
      nextMessage.relativeTime = hByte<<8 |  lByte;
    
      hByte = Serial.read();
      lByte = Serial.read();
      nextMessage.duration = hByte<<8 |  lByte;
      /*end header*/
      
      switch (firstByte){
        case 30://playString
          nextMessage.data[1] = Serial.read(); // instrumentString
          readNewMsg = 0;
        break;
        case 40: //playStringTogether
          //corda 9 na posicao 1
          nextMessage.data[1] = Serial.read(); // bit 0 nao toca a corda. bit 1 toca;
          //corda 1 na posição 1 .... corda 8 na posicao 8
          nextMessage.data[2] = Serial.read(); // bit 0 nao toca a corda. bit 1 toca;
          readNewMsg = 0;
        break;
        case 50://moveBar
          nextMessage.data[1] = Serial.read(); // position - 0 -> down, 1-> up
          readNewMsg = 0;
        break;
        case 55://slide
          nextMessage.data[1] = Serial.read(); // startFret
          nextMessage.data[2] = Serial.read(); // endFret
          readNewMsg = 0;
        break;
        
        case 60://positionBar
          nextMessage.data[1] = Serial.read(); // fret
          readNewMsg = 0;
        break;
        
        case 65: // playNote
          
          nextMessage.data[0] = Serial.read(); // instrument string
          nextMessage.data[1] = Serial.read(); // fret
          
          readNewMsg = 0;
          
        break;
        
       }
    }   
  }else{
    
    if( millis() >= (currentMessage.initialTime + nextMessage.relativeTime) 
       ){ //execucao
      currentMessage = nextMessage;
      readNewMsg = 1;
      switch (currentMessage.idAction){
        case 30://playString
          //funcao pra isso
        break;
        case 50://moveBar
          //funcao pra isso
        break;
        case 55://slide
          //funcao pra isso
        break;
        case 60://positionBar
          //funcao pra isso
        break;
        case 65: // playNote
          currentMessage.initialTime = millis();
          blinkLed(currentMessage.duration);
          
          Serial.write(currentMessage.idMessage);

        break;
       }  
    }else{ //preparacao
      
      switch (currentMessage.idAction){
        case 60://positionBar
          //funcao pra isso
        break;
        case 65: // playNote
          //blinkLed(100);
        break;
        
       }  
    }
    
  }
  
}

